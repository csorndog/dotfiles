" =============================================================
" STANDARD/NON-PLUGIN CONFIGS
" =============================================================

syntax on
filetype indent on
set number  " always show current line number
set expandtab
set tabstop=4
set shiftwidth=4
set fillchars+=vert:\  " remove chars from seperators
set softtabstop=4
set history=1000  " remember more commands and search history
set noswapfile  " swap files give annoying warning
" set clipboard=unnamedplus


" MAPPING LEADER KEY (DEFERRED)
" theicfire .vimrc tips
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
"let mapleader = " " " Leader is the space key
"let g:mapleader = " "
"let maplocalleader = "`"
"let g:maplocalleader = "`"
"nnoremap <SPACE> <Nop>


" =============================================================
" VIM PLUGINS
" =============================================================

" Small simple plug

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'  " file list
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'  "to highlight files in nerdtree
Plug 'kien/ctrlp.vim'  " fuzzy search files

Plug 'davidhalter/jedi-vim'   " jedi for python
Plug 'w0rp/ale'  " python linters
Plug 'Vimjas/vim-python-pep8-indent'  "better indenting for python

Plug 'majutsushi/tagbar'  " show tags in a bar (functions etc) for easy browsing
Plug 'vim-airline/vim-airline'  " make statusline awesome
Plug 'vim-airline/vim-airline-themes'  " themes for statusline
Plug 'tpope/vim-sensible'


" REVIEW/ADD LATER
" NEED TO GET COMFORTABLE W/ FEW BASIC PLUGS ABOVE FIRST BEFORE ADDING OTHERS
" Plug 'tpope/vim-commentary'  "comment-out by gc
" Plug 'airblade/vim-gitgutter'  " show git changes to files in gutter
" Plug 'ncm2/ncm2-bufword'  " buffer keyword completion
" Plug 'ncm2/ncm2-path'  " filepath completion
"Plug 'tweekmonster/impsort.vim'  " color and sort imports
"Plug 'wsdjeg/FlyGrep.vim'  " awesome grep on the fly

call plug#end()

" =============================================================
" PLUGIN-RELATED CONFIGS
" =============================================================

" toggle nerdtree on ctrl+n
map <C-n> :NERDTreeToggle<CR>
map <C-t> :set nosplitright<CR>:TagbarToggle<CR>:set splitright<CR>





" colorscheme
" <groovebox>
" airline configs
let g:airline_powerline_fonts = 1
let g:airline_section_y = ""
let g:airline#extensions#tabline#enabled = 1

" airline - do not show error/warning section
let g:airline_section_error = ""
let g:airline_section_warning = ""

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif



" ale(?) options
let g:ale_python_flake8_options = '--ignore=E129,E501,E302,E265,E241,E305,E402,W503'
let g:ale_python_pylint_options = '-j 0 --max-line-length=120'
let g:ale_list_window_size = 4
let g:ale_sign_column_always = 0
let g:ale_open_list = 1
let g:ale_keep_list_window_open = '1'

" Options are in .pylintrc!
highlight VertSplit ctermbg=253

let g:ale_sign_error = '‼'
let g:ale_sign_warning = '∙'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = '0'
let g:ale_lint_on_save = '1'
nmap <silent> <C-M> <Plug>(ale_previous_wrap)
nmap <silent> <C-m> <Plug>(ale_next_wrap)


" jedi options
let g:jedi#auto_initialization = 1
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#smart_auto_mappings = 0
let g:jedi#popup_on_dot = 0
let g:jedi#completions_command = ""
let g:jedi#show_call_signatures = "1"
let g:jedi#show_call_signatures_delay = 0
let g:jedi#use_tabs_not_buffers = 0
let g:jedi#show_call_signatures_modes = 'i'  " ni = also in normal mode
let g:jedi#enable_speed_debugging=0





" =============================================================
" OTHER COPIED CONFIGS
" =============================================================

" path to your python
"let g:python3_host_prog = '/usr/bin/python3'
"let g:python_host_prog = '/usr/bin/python2'


" " FlyGrep settings
" nnoremap <leader>s :FlyGrep<cr>

" " ale options
" let g:ale_python_flake8_options = '--ignore=E129,E501,E302,E265,E241,E305,E402,W503'
" let g:ale_python_pylint_options = '-j 0 --max-line-length=120'
" let g:ale_list_window_size = 4
" let g:ale_sign_column_always = 0
" let g:ale_open_list = 1
" let g:ale_keep_list_window_open = '1'

"
" " Options are in .pylintrc!
" highlight VertSplit ctermbg=253
"
" let g:ale_sign_error = '‼'
" let g:ale_sign_warning = '∙'
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_lint_on_enter = '0'
" let g:ale_lint_on_save = '1'
" nmap <silent> <C-M> <Plug>(ale_previous_wrap)
" nmap <silent> <C-m> <Plug>(ale_next_wrap)
"
" " jedi options
" let g:jedi#auto_initialization = 1
" let g:jedi#completions_enabled = 0
" let g:jedi#auto_vim_configuration = 0
" let g:jedi#smart_auto_mappings = 0
" let g:jedi#popup_on_dot = 0
" let g:jedi#completions_command = ""
" let g:jedi#show_call_signatures = "1"
" let g:jedi#show_call_signatures_delay = 0
" let g:jedi#use_tabs_not_buffers = 0
" let g:jedi#show_call_signatures_modes = 'i'  " ni = also in normal mode
" let g:jedi#enable_speed_debugging=0
"
" " Impsort option
" hi pythonImportedObject ctermfg=127
" hi pythonImportedFuncDef ctermfg=127
" hi pythonImportedClassDef ctermfg=127
"
" " Remove all trailing whitespace by pressing C-S
" nnoremap <C-S> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>
" autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
"
"
" " move between defs python:
" # NOTE: this break shortcuts with []
" nnoremap [[ [m
" nnoremap ]] ]m
"
" nnoremap <silent><nowait> [ [[
" nnoremap <silent><nowait> ] ]]
"
" function! MakeBracketMaps()
"     nnoremap <silent><nowait><buffer> [ :<c-u>exe 'normal '.v:count.'[m'<cr>
"     nnoremap <silent><nowait><buffer> ] :<c-u>exe 'normal '.v:count.']m'<cr>
" endfunction
"
" augroup bracketmaps
"     autocmd!
"     autocmd FileType python call MakeBracketMaps()
" augroup END
"
"
" " vimgutter options
" let g:gitgutter_override_sign_column_highlight = 0
" let g:gitgutter_map_keys = 0
"
" " ctrl p options
" let g:ctrlp_custom_ignore = '\v\.(npy|jpg|pyc|so|dll)$'
" let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']


" " highlight python and self function
" autocmd BufEnter * syntax match Type /\v\.[a-zA-Z0-9_]+\ze(\[|\s|$|,|\]|\)|\.|:)/hs=s+1
" autocmd BufEnter * syntax match pythonFunction /\v[[:alnum:]_]+\ze(\s?\()/
" hi def link pythonFunction Function
" autocmd BufEnter * syn match Self "\(\W\|^\)\@<=self\(\.\)\@="
" highlight self ctermfg=239
